class Node {
  public int val;
  public int begin;
  public int end;
  public int mid;
  public boolean lazy;

  public Node(int b, int e, int v, int m) {
    begin = b;
    end = e;
    val = v;
    mid = m;
    lazy = false;
  }
}

public class SegmentTree {
  private Node[] segmentTree;// 几乎是一棵完全二叉树，用数组存，叶子节点是真实的值，非叶子节点是所控制区间的和，下标1是root

  public SegmentTree(int[] nums) {
    int size = nums.length << 2;
    segmentTree = new Node[size];
    build(1, nums, 0, nums.length - 1);
  }

  private void build(int root, int[] nums, int begin, int end) {
    if (begin == end) {
      segmentTree[root] = new Node(begin, end, nums[begin], begin);
    } else {
      int mid = (begin + end) / 2;
      build(root * 2, nums, begin, mid);// 构建左子树
      build(root * 2 + 1, nums, mid + 1, end);// 构建右子树
      // 构建root节点
      segmentTree[root] = new Node(begin, end, segmentTree[root * 2].val + segmentTree[root * 2 + 1].val, mid);
    }
  }

  private void pushDown(int nodeId) {// 把线段树节点到更新向下推一层
    if (segmentTree[nodeId].begin < segmentTree[nodeId].end) {// 不是叶子结点
      int element_val = segmentTree[nodeId].val / (segmentTree[nodeId].end - segmentTree[nodeId].begin + 1);
      segmentTree[nodeId * 2].val = element_val * (segmentTree[nodeId * 2].end - segmentTree[nodeId * 2].begin + 1);
      segmentTree[nodeId * 2 + 1].val = element_val * (segmentTree[nodeId * 2 + 1].end - segmentTree[nodeId * 2 + 1].begin + 1);
      segmentTree[nodeId * 2].lazy = true;
      segmentTree[nodeId * 2 + 1].lazy = true;
    }
    segmentTree[nodeId].lazy = false;
  }

  public int query(int root, int q_begin, int q_end) {// 查询指定区间中到元素和
    if (segmentTree[root].lazy) {
      pushDown(root);
    }
    if (segmentTree[root].begin == q_begin && segmentTree[root].end == q_end) {// 完美嵌入当前节点
      return segmentTree[root].val;
    } else if (q_begin > segmentTree[root].mid) {// 完全在右枝
      return query(root * 2 + 1, q_begin, q_end);
    } else if (q_end <= segmentTree[root].mid) {// 完全在左枝
      return query(root * 2, q_begin, q_end);
    } else {// 横跨左右枝
      return query(root * 2, q_begin, segmentTree[root].mid) + query(root * 2 + 1, segmentTree[root].mid + 1, q_end);
    }
  }

  public void update(int root, int u_begin, int u_end, int add_num) {
    if (segmentTree[root].lazy) {// 需要把当前节点的值向下更新
      pushDown(root);
    }
    segmentTree[root].val += add_num * (u_end - u_begin + 1);
    if (segmentTree[root].begin == u_begin && segmentTree[root].end == u_end) {// 完美嵌入当前节点
      segmentTree[root].lazy = true;
    } else if (u_begin > segmentTree[root].mid) {// 完全在右枝
      update(root * 2 + 1, u_begin, u_end, add_num);
    } else if (u_end <= segmentTree[root].mid) {// 完全在左枝
      update(root * 2, u_begin, u_end, add_num);
    } else {// 横跨左右枝
      update(root * 2, u_begin, segmentTree[root].mid, add_num);
      update(root * 2 + 1, segmentTree[root].mid + 1, u_end, add_num);
    }
  }

  public static void main(String[] args) {
    int[] nums = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};
    SegmentTree st = new SegmentTree(nums);
    st.update(1, 0, 4, 2);
    System.out.println(st.query(1, 0, 3));// 14
    System.out.println(st.query(1, 7, 9));// 24
    System.out.println(st.query(1, 7, 7));// 7
    st.update(1, 4, 4, 100);
    System.out.println(st.query(1, 0, 9));// 155
  }
}

